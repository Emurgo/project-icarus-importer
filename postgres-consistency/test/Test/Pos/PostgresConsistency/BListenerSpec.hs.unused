-- | This module tests BListener from 'Pos.PostgresConsistency'.

module Test.Pos.PostgresConsistency.BListenerSpec
       ( spec
       ) where

import           Universum

import qualified Data.List.NonEmpty        as NE
import           Data.Map                  (keys)
import           Test.Hspec                (Spec, describe)
import           Test.Hspec.QuickCheck     (modifyMaxSuccess, prop)
import           Test.QuickCheck           (Arbitrary (..), Gen, Property, forAll, listOf,
                                            suchThat, (===))
import           Test.QuickCheck.Monadic   (assert, pre)

import           Pos.Core                  (BlockCount (..), EpochIndex (..),
                                            HasConfiguration, HeaderHash)
import           Pos.Util                  (divRoundUp)

import           Data.Default              (def)
import           Pos.PostgresConsistency.BListener    (epochPagedBlocksMap)
import           Pos.PostgresConsistency.DB           (Epoch, convertToPagedMap)
import           Pos.Launcher              (HasConfigurations)
import           Pos.Util.CompileInfo      (HasCompileInfo, withCompileInfo)
import           Test.Pos.Block.Logic.Mode (BlockProperty)
import           Test.Pos.Block.Logic.Util (EnableTxPayload (..), InplaceDB (..),
                                            bpGenBlock, bpGenBlocks, bpGoToArbitraryState)
import           Test.Pos.Util             (HasStaticConfigurations, splitIntoChunks,
                                            stopProperty, withDefConfigurations,
                                            withStaticConfigurations)


----------------------------------------------------------------------------
-- Spec
----------------------------------------------------------------------------

-- stack test cardano-sl --fast --test-arguments "-m Test.Pos.PostgresConsistency.BListener"
spec :: Spec
spec = do
    unitSpec
    functionalSpec

----------------------------------------------------------------------------
-- PostgresConsistency functional
----------------------------------------------------------------------------

functionalSpec :: Spec
functionalSpec = withStaticConfigurations $ withCompileInfo def $
    describe "Pos.PostgresConsistency.BListenerSpec" $ modifyMaxSuccess (min 12) $ do
        describe "verifyBlocksBlockchainImporter" verifyBlocksPrefixBlockchainImporterSpec

verifyBlocksPrefixBlockchainImporterSpec
    :: (HasStaticConfigurations, HasCompileInfo) => Spec
verifyBlocksPrefixBlockchainImporterSpec = do
    prop verifyCorrectNumberOfEpochsEmptyBlocks verifyEmptyValidBlockBlockchainImporter
    prop verifyCorrectNumberOfEpochsBlocks verifyValidBlocksBlockchainImporter
  where
    verifyCorrectNumberOfEpochsEmptyBlocks = "blockchainImporter correct number of empty epoch pages"
    verifyCorrectNumberOfEpochsBlocks = "blockchainImporter correct number of epoch pages"

verifyEmptyValidBlockBlockchainImporter
    :: (HasConfigurations, HasCompileInfo)
    => BlockProperty ()
verifyEmptyValidBlockBlockchainImporter = do
    emptyBlock     <- fst <$> bpGenBlock (EnableTxPayload False) (InplaceDB False)
    let epochBlocksMap = epochPagedBlocksMap $ NE.fromList [emptyBlock]
    assert $ length epochBlocksMap == 1

verifyValidBlocksBlockchainImporter
    :: (HasConfigurations, HasCompileInfo)
    => BlockProperty ()
verifyValidBlocksBlockchainImporter = do

    bpGoToArbitraryState

    blocks <-
        map fst . toList <$>
        bpGenBlocks blockNumber (EnableTxPayload False) (InplaceDB False)
    pre (not $ null blocks)

    let epochBlocksMap   = epochPagedBlocksMap $ NE.fromList blocks

    assert $ (length $ fst <$> keys epochBlocksMap) == 10
    assert $ (length $ snd <$> keys epochBlocksMap) == 10
  where
    blockNumber :: Maybe BlockCount
    blockNumber = Just $ BlockCount 100

----------------------------------------------------------------------------
-- PostgresConsistency unit
----------------------------------------------------------------------------

unitSpec :: Spec
unitSpec =
    describe "Pos.PostgresConsistency.BListenerSpec" $ do
        modifyMaxSuccess (const 10000) $ do
            prop "convertToPagedMap" verifyConversionToPagedMap

verifyConversionToPagedMap :: Property
verifyConversionToPagedMap =
  forAll arbitrary $ \epochHeaderHashes ->
      (length $ convertToPagedMap $ getEpochHeaderHashes epochHeaderHashes) ===
          (divRoundUp (length $ snd $ getEpochHeaderHashes epochHeaderHashes) 10)

----------------------------------------------------------------------------
-- Arbitrary
----------------------------------------------------------------------------

-- | Single epoch.
newtype EpochHeaderHashes = EpochHeaderHashes
    { getEpochHeaderHashes :: (Epoch, [HeaderHash])
    } deriving Show

instance Arbitrary EpochHeaderHashes where
    arbitrary = do
        epochIndex   <- arbitrary
        headerHashes <- nonEmptyHeaderHashes
        pure $ EpochHeaderHashes (epochIndex, headerHashes)

-- | Multiple epochs.
newtype EpochsHeaderHashes = EpochsHeaderHashes
    { _getEpochsHeaderHashes :: [(Epoch, [HeaderHash])]
    } deriving Show

instance Arbitrary EpochsHeaderHashes where
    arbitrary = do
        genHeaderHashes <- listOfGeneratedHeaderHashes
        pure $ EpochsHeaderHashes $ zip [firstEpochIndex..] genHeaderHashes
      where
        firstEpochIndex :: EpochIndex
        firstEpochIndex = minBound

        listOfGeneratedHeaderHashes :: Gen [[HeaderHash]]
        listOfGeneratedHeaderHashes = listOf nonEmptyHeaderHashes

-- | The invariant is that an epoch can't have empty header hashes, which is
-- reasonable.
nonEmptyHeaderHashes :: Gen [HeaderHash]
nonEmptyHeaderHashes = suchThat arbitrary (not . null)